#ifndef AE_INPUT
#define AE_INPUT

enum AE_Keys
{
	AEK_0,
	AEK_1,
	AEK_2,
	AEK_3,
	AEK_4,
	AEK_5,
	AEK_6,
	AEK_7,
	AEK_8,
	AEK_9,
	AEK_A,
	AEK_AC_BACK,
	AEK_AC_BOOKMARKS,
	AEK_AC_FORWARD,
	AEK_AC_HOME,
	AEK_AC_REFRESH,
	AEK_AC_SEARCH,
	AEK_AC_STOP,
	AEK_AGAIN,
	AEK_ALTERASE,
	AEK_QUOTE,
	AEK_APPLICATION,
	AEK_AUDIOMUTE,
	AEK_AUDIONEXT,
	AEK_AUDIOPLAY,
	AEK_AUDIOPREV,
	AEK_AUDIOSTOP,
	AEK_B,
	AEK_BACKSLASH,
	AEK_BACKSPACE,
	AEK_BRIGHTNESSDOWN,
	AEK_BRIGHTNESSUP,
	AEK_C,
	AEK_CALCULATOR,
	AEK_CANCEL,
	AEK_CAPSLOCK,
	AEK_CLEAR,
	AEK_CLEARAGAIN,
	AEK_COMMA,
	AEK_COMPUTER,
	AEK_COPY,
	AEK_CRSEL,
	AEK_CURRENCYSUBUNIT,
	AEK_CURRENCYUNIT,
	AEK_CUT,
	AEK_D,
	AEK_DECIMALSEPARATOR,
	AEK_DELETE,
	AEK_DISPLAYSWITCH,
	AEK_DOWN,
	AEK_E,
	AEK_EJECT,
	AEK_END,
	AEK_EQUALS,
	AEK_ESC,
	AEK_EXE,
	AEK_EXSEL,
	AEK_F,
	AEK_F1,
	AEK_F10,
	AEK_F11,
	AEK_F12,
	AEK_F13,
	AEK_F14,
	AEK_F15,
	AEK_F16,
	AEK_F17,
	AEK_F18,
	AEK_F19,
	AEK_F2,
	AEK_F20,
	AEK_F21,
	AEK_F22,
	AEK_F23,
	AEK_F24,
	AEK_F3,
	AEK_F4,
	AEK_F5,
	AEK_F6,
	AEK_F7,
	AEK_F8,
	AEK_F9,
	AEK_FIND,
	AEK_G,
	AEK_BACKQUOTE,
	AEK_H,
	AEK_HELP,
	AEK_HOME,
	AEK_I,
	AEK_INSERT,
	AEK_J,
	AEK_K,
	AEK_KBDILLUMDOWN,
	AEK_KBDILLUMTOGGLE,
	AEK_KBDILLUMUP,
	AEK_KP_0,
	AEK_KP_00,
	AEK_KP_000,
	AEK_KP_1,
	AEK_KP_2,
	AEK_KP_3,
	AEK_KP_4,
	AEK_KP_5,
	AEK_KP_6,
	AEK_KP_7,
	AEK_KP_8,
	AEK_KP_9,
	AEK_KP_A,
	AEK_KP_AMPERSAND,
	AEK_KP_AT,
	AEK_KP_B,
	AEK_KP_BACKSPACE,
	AEK_KP_BINARY,
	AEK_KP_C,
	AEK_KP_CLEAR,
	AEK_KP_CLEARENTRY,
	AEK_KP_COLON,
	AEK_KP_COMMA,
	AEK_KP_D,
	AEK_KP_DBLAMPERSAND,
	AEK_KP_DBLVERTICALBAR,
	AEK_KP_DECIMAL,
	AEK_KP_DIVIDE,
	AEK_KP_E,
	AEK_KP_ENTER,
	AEK_KP_EQUALS,
	AEK_KP_EQUALSAS400,
	AEK_KP_EXCLAM,
	AEK_KP_F,
	AEK_KP_GREATER,
	AEK_KP_HASH,
	AEK_KP_HEXADECIMAL,
	AEK_KP_LEFTBRACE,
	AEK_KP_LEFTPAREN,
	AEK_KP_LESS,
	AEK_KP_MEMADD,
	AEK_KP_MEMCLEAR,
	AEK_KP_MEMDIVIDE,
	AEK_KP_MEMMULTIPLY,
	AEK_KP_MEMRECALL,
	AEK_KP_MEMSTORE,
	AEK_KP_MEMSUBTRACT,
	AEK_KP_MINUS,
	AEK_KP_MULTIPLY,
	AEK_KP_OCTAL,
	AEK_KP_PERCENT,
	AEK_KP_PERIOD,
	AEK_KP_PLUS,
	AEK_KP_PLUSMINUS,
	AEK_KP_POWER,
	AEK_KP_RIGHTBRACE,
	AEK_KP_RIGHTPAREN,
	AEK_KP_SPACE,
	AEK_KP_TAB,
	AEK_KP_VERTICALBAR,
	AEK_KP_XOR,
	AEK_L,
	AEK_LALT,
	AEK_LCTRL,
	AEK_LEFT,
	AEK_LEFTBRACKET,
	AEK_LGUI,
	AEK_LSHIFT,
	AEK_M,
	AEK_MAIL,
	AEK_MEDIASELECT,
	AEK_MENU,
	AEK_MINUS,
	AEK_MODE,
	AEK_MUTE,
	AEK_N,
	AEK_NUMLOCKCLEAR,
	AEK_O,
	AEK_OPER,
	AEK_OUT,
	AEK_P,
	AEK_PAGEDOWN,
	AEK_PAGEUP,
	AEK_PASTE,
	AEK_PAUSE,
	AEK_PERIOD,
	AEK_POWER,
	AEK_PRINTSCREEN,
	AEK_PRIOR,
	AEK_Q,
	AEK_R,
	AEK_RALT,
	AEK_RCTRL,
	AEK_ENTER,
	AEK_RETURN2,
	AEK_RGUI,
	AEK_RIGHT,
	AEK_RIGHTBRACKET,
	AEK_RSHIFT,
	AEK_S,
	AEK_SCROLLLOCK,
	AEK_SELECT,
	AEK_SEMICOLON,
	AEK_SEPARATOR,
	AEK_SLASH,
	AEK_SLEEP,
	AEK_SPACE,
	AEK_STOP,
	AEK_SYSREQ,
	AEK_T,
	AEK_TAB,
	AEK_THOUSANDSSEPARATOR,
	AEK_U,
	AEK_UNDO,
	AEK_UNKNOWN,
	AEK_UP,
	AEK_V,
	AEK_VOLUMEDOWN,
	AEK_VOLUMEUP,
	AEK_W,
	AEK_WWW,
	AEK_X,
	AEK_Y,
	AEK_Z,
	AEK_AMPERSAND,
	AEK_ASTERISK,
	AEK_AT,
	AEK_CARET,
	AEK_COLON,
	AEK_DOLLAR,
	AEK_EXCLAIM,
	AEK_GREATER,
	AEK_HASH,
	AEK_LEFTPAREN,
	AEK_LESS,
	AEK_PERCENT,
	AEK_PLUS,
	AEK_QUESTION,
	AEK_QUOTEDBL,
	AEK_RIGHTPAREN,
	AEK_UNDERSCORE,
	AEK_MAX,
};

enum AE_MouseButtons
{
	AE_MB_LEFT,
	AE_MB_MIDDLE,
	AE_MB_RIGHT,
	AE_MB_MAX,
};

struct AE_ButtonState
{
	bool IsDown;
	bool EndedDown;
	bool Up;
	int HalfTransitions;
};

struct AE_ControllerInput
{
	AE_ButtonState Keys[AEK_MAX];
};

struct AE_Input
{
	AE_ControllerInput Keyboard;
	AE_ControllerInput Mouse;
	
	v2i MouseState;
	v2i Scroll;
	bool Scrolling;
	
	bool KeyDown;
	bool KeyWasDown;
	bool KeyEndedDown;
	const Uint8* KeyState;
};

AE_API void 
AE_ProcessKeyPress(AE_ButtonState* NewState, bool IsDown, bool WasDown);
AE_API void 
AE_ResetKeyState(AE_ControllerInput* KeyInput, int nKeys);

#endif